/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class Customers extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Get customers
     *
     * @remarks
     * Get a single customers record
     */
    async getCustomersId(
        id: string,
        xIntegrationosSecret: string,
        xIntegrationosConnectionKey: string,
        options?: RequestOptions
    ): Promise<operations.GetCustomersIdResponse> {
        const input$: operations.GetCustomersIdRequest = {
            id: id,
            xIntegrationosSecret: xIntegrationosSecret,
            xIntegrationosConnectionKey: xIntegrationosConnectionKey,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetCustomersIdRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/customers/{id}")(pathParams$);

        headers$.set(
            "X-INTEGRATIONOS-CONNECTION-KEY",
            enc$.encodeSimple(
                "X-INTEGRATIONOS-CONNECTION-KEY",
                payload$["X-INTEGRATIONOS-CONNECTION-KEY"],
                { explode: false, charEncoding: "none" }
            )
        );
        headers$.set(
            "X-INTEGRATIONOS-SECRET",
            enc$.encodeSimple("X-INTEGRATIONOS-SECRET", payload$["X-INTEGRATIONOS-SECRET"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const response = await this.fetch$(
            { method: "get", path: path$, headers: headers$, body: body$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetCustomersIdResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Delete customers
     *
     * @remarks
     * Delete a single customers record
     */
    async deleteCustomersId(
        id: string,
        xIntegrationosSecret: string,
        xIntegrationosConnectionKey: string,
        options?: RequestOptions
    ): Promise<operations.DeleteCustomersIdResponse> {
        const input$: operations.DeleteCustomersIdRequest = {
            id: id,
            xIntegrationosSecret: xIntegrationosSecret,
            xIntegrationosConnectionKey: xIntegrationosConnectionKey,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.DeleteCustomersIdRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/customers/{id}")(pathParams$);

        headers$.set(
            "X-INTEGRATIONOS-CONNECTION-KEY",
            enc$.encodeSimple(
                "X-INTEGRATIONOS-CONNECTION-KEY",
                payload$["X-INTEGRATIONOS-CONNECTION-KEY"],
                { explode: false, charEncoding: "none" }
            )
        );
        headers$.set(
            "X-INTEGRATIONOS-SECRET",
            enc$.encodeSimple("X-INTEGRATIONOS-SECRET", payload$["X-INTEGRATIONOS-SECRET"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const response = await this.fetch$(
            { method: "delete", path: path$, headers: headers$, body: body$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.DeleteCustomersIdResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Update customers
     *
     * @remarks
     * Update a single customers record
     */
    async patchCustomersId(
        id: string,
        xIntegrationosSecret: string,
        xIntegrationosConnectionKey: string,
        requestBody?: operations.PatchCustomersIdRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.PatchCustomersIdResponse> {
        const input$: operations.PatchCustomersIdRequest = {
            id: id,
            xIntegrationosSecret: xIntegrationosSecret,
            xIntegrationosConnectionKey: xIntegrationosConnectionKey,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.PatchCustomersIdRequest$.outboundSchema.parse(input$);

        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            id: enc$.encodeSimple("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = this.templateURLComponent("/customers/{id}")(pathParams$);

        headers$.set(
            "X-INTEGRATIONOS-CONNECTION-KEY",
            enc$.encodeSimple(
                "X-INTEGRATIONOS-CONNECTION-KEY",
                payload$["X-INTEGRATIONOS-CONNECTION-KEY"],
                { explode: false, charEncoding: "none" }
            )
        );
        headers$.set(
            "X-INTEGRATIONOS-SECRET",
            enc$.encodeSimple("X-INTEGRATIONOS-SECRET", payload$["X-INTEGRATIONOS-SECRET"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const response = await this.fetch$(
            { method: "patch", path: path$, headers: headers$, body: body$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.PatchCustomersIdResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List customers
     *
     * @remarks
     * Get all customers records
     */
    async getCustomers(
        xIntegrationosSecret: string,
        xIntegrationosConnectionKey: string,
        options?: RequestOptions
    ): Promise<operations.GetCustomersResponse> {
        const input$: operations.GetCustomersRequest = {
            xIntegrationosSecret: xIntegrationosSecret,
            xIntegrationosConnectionKey: xIntegrationosConnectionKey,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetCustomersRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/customers")();

        headers$.set(
            "X-INTEGRATIONOS-CONNECTION-KEY",
            enc$.encodeSimple(
                "X-INTEGRATIONOS-CONNECTION-KEY",
                payload$["X-INTEGRATIONOS-CONNECTION-KEY"],
                { explode: false, charEncoding: "none" }
            )
        );
        headers$.set(
            "X-INTEGRATIONOS-SECRET",
            enc$.encodeSimple("X-INTEGRATIONOS-SECRET", payload$["X-INTEGRATIONOS-SECRET"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const response = await this.fetch$(
            { method: "get", path: path$, headers: headers$, body: body$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetCustomersResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Create customers
     *
     * @remarks
     * Create a single customers record
     */
    async postCustomers(
        xIntegrationosSecret: string,
        xIntegrationosConnectionKey: string,
        requestBody: operations.PostCustomersRequestBody,
        options?: RequestOptions
    ): Promise<operations.PostCustomersResponse> {
        const input$: operations.PostCustomersRequest = {
            xIntegrationosSecret: xIntegrationosSecret,
            xIntegrationosConnectionKey: xIntegrationosConnectionKey,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.PostCustomersRequest$.outboundSchema.parse(input$);

        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const path$ = this.templateURLComponent("/customers")();

        headers$.set(
            "X-INTEGRATIONOS-CONNECTION-KEY",
            enc$.encodeSimple(
                "X-INTEGRATIONOS-CONNECTION-KEY",
                payload$["X-INTEGRATIONOS-CONNECTION-KEY"],
                { explode: false, charEncoding: "none" }
            )
        );
        headers$.set(
            "X-INTEGRATIONOS-SECRET",
            enc$.encodeSimple("X-INTEGRATIONOS-SECRET", payload$["X-INTEGRATIONOS-SECRET"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const response = await this.fetch$(
            { method: "post", path: path$, headers: headers$, body: body$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.PostCustomersResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get customers count
     *
     * @remarks
     * Get the count of customers records
     */
    async getCustomersCount(
        xIntegrationosSecret: string,
        xIntegrationosConnectionKey: string,
        options?: RequestOptions
    ): Promise<operations.GetCustomersCountResponse> {
        const input$: operations.GetCustomersCountRequest = {
            xIntegrationosSecret: xIntegrationosSecret,
            xIntegrationosConnectionKey: xIntegrationosConnectionKey,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetCustomersCountRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/customers/count")();

        headers$.set(
            "X-INTEGRATIONOS-CONNECTION-KEY",
            enc$.encodeSimple(
                "X-INTEGRATIONOS-CONNECTION-KEY",
                payload$["X-INTEGRATIONOS-CONNECTION-KEY"],
                { explode: false, charEncoding: "none" }
            )
        );
        headers$.set(
            "X-INTEGRATIONOS-SECRET",
            enc$.encodeSimple("X-INTEGRATIONOS-SECRET", payload$["X-INTEGRATIONOS-SECRET"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const response = await this.fetch$(
            { method: "get", path: path$, headers: headers$, body: body$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetCustomersCountResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
