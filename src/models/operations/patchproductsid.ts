/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Prices = {
    amount?: number | undefined;
    currency?: string | undefined;
};

export enum SkuValidation {
    GlobalUnique = "global_unique",
    LocalUnique = "local_unique",
    None = "none",
}

export enum MimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type Images = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: MimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type Dimensions = {};

export enum PatchProductsIdStatus {
    Active = "ACTIVE",
    Inactive = "INACTIVE",
    OutOfStock = "OUT_OF_STOCK",
    Discontinued = "DISCONTINUED",
}

export type Variants = {
    id?: string | undefined;
    productId?: number | undefined;
    title?: string | undefined;
    sku?: string | undefined;
    price?: number | undefined;
    compareAtPrice?: number | undefined;
    inventoryQuantity?: number | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    requiresShipping?: boolean | undefined;
    taxable?: boolean | undefined;
    barcode?: string | undefined;
    imageId?: number | undefined;
    dimensions?: Dimensions | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    status?: PatchProductsIdStatus | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type Options = {
    id?: string | undefined;
    productId?: number | undefined;
    name?: string | undefined;
    values?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
};

export enum PatchProductsIdType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PatchProductsIdGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PatchProductsIdFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchProductsIdCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchProductsIdFieldType | undefined;
};

export type Address = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchProductsIdType | undefined;
    geoLocation?: PatchProductsIdGeoLocation | undefined;
    customFields?: Array<PatchProductsIdCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export type ContactInformation = {};

export enum PatchProductsIdProductsType {
    Warehouse = "WAREHOUSE",
    RetailStore = "RETAIL_STORE",
    DistributionCenter = "DISTRIBUTION_CENTER",
    DropShipper = "DROP_SHIPPER",
    Other = "OTHER",
}

export type InventoryLocation = {
    locationId?: string | undefined;
    name?: string | undefined;
    address?: Address | undefined;
    contactInformation?: Array<ContactInformation> | undefined;
    type?: PatchProductsIdProductsType | undefined;
    quantity?: number | undefined;
    operationalHours?: string | undefined;
    isActive?: boolean | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    deleted?: boolean | undefined;
};

export type PatchProductsIdDimensions = {
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
};

export enum PatchProductsIdProductsFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchProductsIdProductsCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchProductsIdProductsFieldType | undefined;
};

export type Metadata = {};

export type AssociatedWith = {};

export type Permissions = {};

export type DownloadFiles = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: Metadata | undefined;
    associatedWith?: AssociatedWith | undefined;
    permissions?: Permissions | undefined;
};

export enum PatchProductsIdProductsStatus {
    Active = "active",
    Archived = "archived",
    Draft = "draft",
    Deleted = "deleted",
}

export type TaxDetails = {};

export enum PatchProductsIdProductsRequestFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchProductsIdProductsRequestCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchProductsIdProductsRequestFieldType | undefined;
};

export type Tax = {
    taxCode?: string | undefined;
    taxable?: boolean | undefined;
    taxRate?: number | undefined;
    currency?: string | undefined;
    country?: string | undefined;
    region?: string | undefined;
    description?: string | undefined;
    taxAmount?: number | undefined;
    taxDetails?: TaxDetails | undefined;
    customFields?: Array<PatchProductsIdProductsRequestCustomFields> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type Localizations = {
    locale?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    metaTitle?: string | undefined;
    metaDescription?: string | undefined;
};

export type PatchProductsIdRequestBody = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    prices?: Array<Prices> | undefined;
    sku?: string | undefined;
    skuValidation?: SkuValidation | undefined;
    images?: Array<Images> | undefined;
    variants?: Array<Variants> | undefined;
    options?: Array<Options> | undefined;
    categories?: Array<string> | undefined;
    tags?: Array<string> | undefined;
    vendor?: string | undefined;
    inventoryQuantity?: number | undefined;
    inventoryLocation?: InventoryLocation | undefined;
    availableForSale?: boolean | undefined;
    dimensions?: PatchProductsIdDimensions | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    type?: string | undefined;
    metaTitle?: string | undefined;
    metaDescription?: string | undefined;
    seoKeywords?: Array<string> | undefined;
    slug?: string | undefined;
    customFields?: Array<PatchProductsIdProductsCustomFields> | undefined;
    isDownloadable?: boolean | undefined;
    downloadFiles?: Array<DownloadFiles> | undefined;
    relatedProducts?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    publishedAt?: number | undefined;
    status?: PatchProductsIdProductsStatus | undefined;
    tax?: Tax | undefined;
    localizations?: Array<Localizations> | undefined;
};

export type PatchProductsIdRequest = {
    /**
     * The id of the model
     */
    id: string;
    /**
     * IntegrationOS API key
     */
    xIntegrationosSecret: string;
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
    requestBody?: PatchProductsIdRequestBody | undefined;
};

export enum PatchProductsIdStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export type PatchProductsIdUnified = {
    count?: number | undefined;
};

export type PatchProductsIdPassthrough = {};

export type PatchProductsIdCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type PatchProductsIdMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: PatchProductsIdCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

/**
 * Successful response
 */
export type PatchProductsIdResponseBody = {
    status?: string | undefined;
    statusCode?: PatchProductsIdStatusCode | undefined;
    unified?: PatchProductsIdUnified | undefined;
    passthrough?: PatchProductsIdPassthrough | undefined;
    meta?: PatchProductsIdMeta | undefined;
};

export type PatchProductsIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: PatchProductsIdResponseBody | undefined;
};

/** @internal */
export namespace Prices$ {
    export type Inbound = {
        amount?: number | undefined;
        currency?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Prices, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number().optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });

    export type Outbound = {
        amount?: number | undefined;
        currency?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Prices> = z
        .object({
            amount: z.number().optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });
}

/** @internal */
export const SkuValidation$ = z.nativeEnum(SkuValidation);

/** @internal */
export const MimeType$ = z.nativeEnum(MimeType);

/** @internal */
export namespace Images$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: MimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<Images, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: MimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: MimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Images> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: MimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace Dimensions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Dimensions, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Dimensions> = z.object({});
}

/** @internal */
export const PatchProductsIdStatus$ = z.nativeEnum(PatchProductsIdStatus);

/** @internal */
export namespace Variants$ {
    export type Inbound = {
        id?: string | undefined;
        productId?: number | undefined;
        title?: string | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        compareAtPrice?: number | undefined;
        inventoryQuantity?: number | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        barcode?: string | undefined;
        imageId?: number | undefined;
        dimensions?: Dimensions$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        status?: PatchProductsIdStatus | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<Variants, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            productId: z.number().optional(),
            title: z.string().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            compareAtPrice: z.number().optional(),
            inventoryQuantity: z.number().optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            barcode: z.string().optional(),
            imageId: z.number().optional(),
            dimensions: z.lazy(() => Dimensions$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            status: PatchProductsIdStatus$.optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.compareAtPrice === undefined ? null : { compareAtPrice: v.compareAtPrice }),
                ...(v.inventoryQuantity === undefined
                    ? null
                    : { inventoryQuantity: v.inventoryQuantity }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.barcode === undefined ? null : { barcode: v.barcode }),
                ...(v.imageId === undefined ? null : { imageId: v.imageId }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        productId?: number | undefined;
        title?: string | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        compareAtPrice?: number | undefined;
        inventoryQuantity?: number | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        barcode?: string | undefined;
        imageId?: number | undefined;
        dimensions?: Dimensions$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        status?: PatchProductsIdStatus | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Variants> = z
        .object({
            id: z.string().optional(),
            productId: z.number().optional(),
            title: z.string().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            compareAtPrice: z.number().optional(),
            inventoryQuantity: z.number().optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            barcode: z.string().optional(),
            imageId: z.number().optional(),
            dimensions: z.lazy(() => Dimensions$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            status: PatchProductsIdStatus$.optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.compareAtPrice === undefined ? null : { compareAtPrice: v.compareAtPrice }),
                ...(v.inventoryQuantity === undefined
                    ? null
                    : { inventoryQuantity: v.inventoryQuantity }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.barcode === undefined ? null : { barcode: v.barcode }),
                ...(v.imageId === undefined ? null : { imageId: v.imageId }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace Options$ {
    export type Inbound = {
        id?: string | undefined;
        productId?: number | undefined;
        name?: string | undefined;
        values?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Options, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            productId: z.number().optional(),
            name: z.string().optional(),
            values: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.values === undefined ? null : { values: v.values }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        productId?: number | undefined;
        name?: string | undefined;
        values?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Options> = z
        .object({
            id: z.string().optional(),
            productId: z.number().optional(),
            name: z.string().optional(),
            values: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.values === undefined ? null : { values: v.values }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

/** @internal */
export const PatchProductsIdType$ = z.nativeEnum(PatchProductsIdType);

/** @internal */
export namespace PatchProductsIdGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchProductsIdGeoLocation, z.ZodTypeDef, Inbound> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchProductsIdGeoLocation> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PatchProductsIdFieldType$ = z.nativeEnum(PatchProductsIdFieldType);

/** @internal */
export namespace PatchProductsIdCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchProductsIdFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<PatchProductsIdCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchProductsIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchProductsIdFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchProductsIdCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchProductsIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace Address$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchProductsIdType | undefined;
        geoLocation?: PatchProductsIdGeoLocation$.Inbound | undefined;
        customFields?: Array<PatchProductsIdCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Address, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchProductsIdType$.optional(),
            geoLocation: z.lazy(() => PatchProductsIdGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchProductsIdCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchProductsIdType | undefined;
        geoLocation?: PatchProductsIdGeoLocation$.Outbound | undefined;
        customFields?: Array<PatchProductsIdCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Address> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchProductsIdType$.optional(),
            geoLocation: z.lazy(() => PatchProductsIdGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchProductsIdCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export namespace ContactInformation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<ContactInformation, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContactInformation> = z.object(
        {}
    );
}

/** @internal */
export const PatchProductsIdProductsType$ = z.nativeEnum(PatchProductsIdProductsType);

/** @internal */
export namespace InventoryLocation$ {
    export type Inbound = {
        locationId?: string | undefined;
        name?: string | undefined;
        address?: Address$.Inbound | undefined;
        contactInformation?: Array<ContactInformation$.Inbound> | undefined;
        type?: PatchProductsIdProductsType | undefined;
        quantity?: number | undefined;
        operationalHours?: string | undefined;
        isActive?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<InventoryLocation, z.ZodTypeDef, Inbound> = z
        .object({
            locationId: z.string().optional(),
            name: z.string().optional(),
            address: z.lazy(() => Address$.inboundSchema).optional(),
            contactInformation: z.array(z.lazy(() => ContactInformation$.inboundSchema)).optional(),
            type: PatchProductsIdProductsType$.optional(),
            quantity: z.number().optional(),
            operationalHours: z.string().optional(),
            isActive: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locationId === undefined ? null : { locationId: v.locationId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.contactInformation === undefined
                    ? null
                    : { contactInformation: v.contactInformation }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.operationalHours === undefined
                    ? null
                    : { operationalHours: v.operationalHours }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        locationId?: string | undefined;
        name?: string | undefined;
        address?: Address$.Outbound | undefined;
        contactInformation?: Array<ContactInformation$.Outbound> | undefined;
        type?: PatchProductsIdProductsType | undefined;
        quantity?: number | undefined;
        operationalHours?: string | undefined;
        isActive?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InventoryLocation> = z
        .object({
            locationId: z.string().optional(),
            name: z.string().optional(),
            address: z.lazy(() => Address$.outboundSchema).optional(),
            contactInformation: z
                .array(z.lazy(() => ContactInformation$.outboundSchema))
                .optional(),
            type: PatchProductsIdProductsType$.optional(),
            quantity: z.number().optional(),
            operationalHours: z.string().optional(),
            isActive: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locationId === undefined ? null : { locationId: v.locationId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.contactInformation === undefined
                    ? null
                    : { contactInformation: v.contactInformation }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.operationalHours === undefined
                    ? null
                    : { operationalHours: v.operationalHours }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PatchProductsIdDimensions$ {
    export type Inbound = {
        height?: number | undefined;
        length?: number | undefined;
        width?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchProductsIdDimensions, z.ZodTypeDef, Inbound> = z
        .object({
            height: z.number().optional(),
            length: z.number().optional(),
            width: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.length === undefined ? null : { length: v.length }),
                ...(v.width === undefined ? null : { width: v.width }),
            };
        });

    export type Outbound = {
        height?: number | undefined;
        length?: number | undefined;
        width?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchProductsIdDimensions> = z
        .object({
            height: z.number().optional(),
            length: z.number().optional(),
            width: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.length === undefined ? null : { length: v.length }),
                ...(v.width === undefined ? null : { width: v.width }),
            };
        });
}

/** @internal */
export const PatchProductsIdProductsFieldType$ = z.nativeEnum(PatchProductsIdProductsFieldType);

/** @internal */
export namespace PatchProductsIdProductsCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchProductsIdProductsFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchProductsIdProductsCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchProductsIdProductsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchProductsIdProductsFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchProductsIdProductsCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchProductsIdProductsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace Metadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Metadata> = z.object({});
}

/** @internal */
export namespace AssociatedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<AssociatedWith, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AssociatedWith> = z.object({});
}

/** @internal */
export namespace Permissions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Permissions, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Permissions> = z.object({});
}

/** @internal */
export namespace DownloadFiles$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: Metadata$.Inbound | undefined;
        associatedWith?: AssociatedWith$.Inbound | undefined;
        permissions?: Permissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DownloadFiles, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => Metadata$.inboundSchema).optional(),
            associatedWith: z.lazy(() => AssociatedWith$.inboundSchema).optional(),
            permissions: z.lazy(() => Permissions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: Metadata$.Outbound | undefined;
        associatedWith?: AssociatedWith$.Outbound | undefined;
        permissions?: Permissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DownloadFiles> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => Metadata$.outboundSchema).optional(),
            associatedWith: z.lazy(() => AssociatedWith$.outboundSchema).optional(),
            permissions: z.lazy(() => Permissions$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export const PatchProductsIdProductsStatus$ = z.nativeEnum(PatchProductsIdProductsStatus);

/** @internal */
export namespace TaxDetails$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<TaxDetails, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaxDetails> = z.object({});
}

/** @internal */
export const PatchProductsIdProductsRequestFieldType$ = z.nativeEnum(
    PatchProductsIdProductsRequestFieldType
);

/** @internal */
export namespace PatchProductsIdProductsRequestCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchProductsIdProductsRequestFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchProductsIdProductsRequestCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchProductsIdProductsRequestFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchProductsIdProductsRequestFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchProductsIdProductsRequestCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchProductsIdProductsRequestFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace Tax$ {
    export type Inbound = {
        taxCode?: string | undefined;
        taxable?: boolean | undefined;
        taxRate?: number | undefined;
        currency?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        description?: string | undefined;
        taxAmount?: number | undefined;
        taxDetails?: TaxDetails$.Inbound | undefined;
        customFields?: Array<PatchProductsIdProductsRequestCustomFields$.Inbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<Tax, z.ZodTypeDef, Inbound> = z
        .object({
            taxCode: z.string().optional(),
            taxable: z.boolean().optional(),
            taxRate: z.number().optional(),
            currency: z.string().optional(),
            country: z.string().optional(),
            region: z.string().optional(),
            description: z.string().optional(),
            taxAmount: z.number().optional(),
            taxDetails: z.lazy(() => TaxDetails$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchProductsIdProductsRequestCustomFields$.inboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.taxCode === undefined ? null : { taxCode: v.taxCode }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.taxRate === undefined ? null : { taxRate: v.taxRate }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.taxAmount === undefined ? null : { taxAmount: v.taxAmount }),
                ...(v.taxDetails === undefined ? null : { taxDetails: v.taxDetails }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        taxCode?: string | undefined;
        taxable?: boolean | undefined;
        taxRate?: number | undefined;
        currency?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        description?: string | undefined;
        taxAmount?: number | undefined;
        taxDetails?: TaxDetails$.Outbound | undefined;
        customFields?: Array<PatchProductsIdProductsRequestCustomFields$.Outbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Tax> = z
        .object({
            taxCode: z.string().optional(),
            taxable: z.boolean().optional(),
            taxRate: z.number().optional(),
            currency: z.string().optional(),
            country: z.string().optional(),
            region: z.string().optional(),
            description: z.string().optional(),
            taxAmount: z.number().optional(),
            taxDetails: z.lazy(() => TaxDetails$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchProductsIdProductsRequestCustomFields$.outboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.taxCode === undefined ? null : { taxCode: v.taxCode }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.taxRate === undefined ? null : { taxRate: v.taxRate }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.taxAmount === undefined ? null : { taxAmount: v.taxAmount }),
                ...(v.taxDetails === undefined ? null : { taxDetails: v.taxDetails }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace Localizations$ {
    export type Inbound = {
        locale?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        metaTitle?: string | undefined;
        metaDescription?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Localizations, z.ZodTypeDef, Inbound> = z
        .object({
            locale: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            metaTitle: z.string().optional(),
            metaDescription: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locale === undefined ? null : { locale: v.locale }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.metaTitle === undefined ? null : { metaTitle: v.metaTitle }),
                ...(v.metaDescription === undefined
                    ? null
                    : { metaDescription: v.metaDescription }),
            };
        });

    export type Outbound = {
        locale?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        metaTitle?: string | undefined;
        metaDescription?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Localizations> = z
        .object({
            locale: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            metaTitle: z.string().optional(),
            metaDescription: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locale === undefined ? null : { locale: v.locale }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.metaTitle === undefined ? null : { metaTitle: v.metaTitle }),
                ...(v.metaDescription === undefined
                    ? null
                    : { metaDescription: v.metaDescription }),
            };
        });
}

/** @internal */
export namespace PatchProductsIdRequestBody$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        prices?: Array<Prices$.Inbound> | undefined;
        sku?: string | undefined;
        skuValidation?: SkuValidation | undefined;
        images?: Array<Images$.Inbound> | undefined;
        variants?: Array<Variants$.Inbound> | undefined;
        options?: Array<Options$.Inbound> | undefined;
        categories?: Array<string> | undefined;
        tags?: Array<string> | undefined;
        vendor?: string | undefined;
        inventoryQuantity?: number | undefined;
        inventoryLocation?: InventoryLocation$.Inbound | undefined;
        availableForSale?: boolean | undefined;
        dimensions?: PatchProductsIdDimensions$.Inbound | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        type?: string | undefined;
        metaTitle?: string | undefined;
        metaDescription?: string | undefined;
        seoKeywords?: Array<string> | undefined;
        slug?: string | undefined;
        customFields?: Array<PatchProductsIdProductsCustomFields$.Inbound> | undefined;
        isDownloadable?: boolean | undefined;
        downloadFiles?: Array<DownloadFiles$.Inbound> | undefined;
        relatedProducts?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        publishedAt?: number | undefined;
        status?: PatchProductsIdProductsStatus | undefined;
        tax?: Tax$.Inbound | undefined;
        localizations?: Array<Localizations$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<PatchProductsIdRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            prices: z.array(z.lazy(() => Prices$.inboundSchema)).optional(),
            sku: z.string().optional(),
            skuValidation: SkuValidation$.optional(),
            images: z.array(z.lazy(() => Images$.inboundSchema)).optional(),
            variants: z.array(z.lazy(() => Variants$.inboundSchema)).optional(),
            options: z.array(z.lazy(() => Options$.inboundSchema)).optional(),
            categories: z.array(z.string()).optional(),
            tags: z.array(z.string()).optional(),
            vendor: z.string().optional(),
            inventoryQuantity: z.number().optional(),
            inventoryLocation: z.lazy(() => InventoryLocation$.inboundSchema).optional(),
            availableForSale: z.boolean().optional(),
            dimensions: z.lazy(() => PatchProductsIdDimensions$.inboundSchema).optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            type: z.string().optional(),
            metaTitle: z.string().optional(),
            metaDescription: z.string().optional(),
            seoKeywords: z.array(z.string()).optional(),
            slug: z.string().optional(),
            customFields: z
                .array(z.lazy(() => PatchProductsIdProductsCustomFields$.inboundSchema))
                .optional(),
            isDownloadable: z.boolean().optional(),
            downloadFiles: z.array(z.lazy(() => DownloadFiles$.inboundSchema)).optional(),
            relatedProducts: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            publishedAt: z.number().optional(),
            status: PatchProductsIdProductsStatus$.optional(),
            tax: z.lazy(() => Tax$.inboundSchema).optional(),
            localizations: z.array(z.lazy(() => Localizations$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.prices === undefined ? null : { prices: v.prices }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.skuValidation === undefined ? null : { skuValidation: v.skuValidation }),
                ...(v.images === undefined ? null : { images: v.images }),
                ...(v.variants === undefined ? null : { variants: v.variants }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.categories === undefined ? null : { categories: v.categories }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.vendor === undefined ? null : { vendor: v.vendor }),
                ...(v.inventoryQuantity === undefined
                    ? null
                    : { inventoryQuantity: v.inventoryQuantity }),
                ...(v.inventoryLocation === undefined
                    ? null
                    : { inventoryLocation: v.inventoryLocation }),
                ...(v.availableForSale === undefined
                    ? null
                    : { availableForSale: v.availableForSale }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.metaTitle === undefined ? null : { metaTitle: v.metaTitle }),
                ...(v.metaDescription === undefined
                    ? null
                    : { metaDescription: v.metaDescription }),
                ...(v.seoKeywords === undefined ? null : { seoKeywords: v.seoKeywords }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.isDownloadable === undefined ? null : { isDownloadable: v.isDownloadable }),
                ...(v.downloadFiles === undefined ? null : { downloadFiles: v.downloadFiles }),
                ...(v.relatedProducts === undefined
                    ? null
                    : { relatedProducts: v.relatedProducts }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.publishedAt === undefined ? null : { publishedAt: v.publishedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.localizations === undefined ? null : { localizations: v.localizations }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        prices?: Array<Prices$.Outbound> | undefined;
        sku?: string | undefined;
        skuValidation?: SkuValidation | undefined;
        images?: Array<Images$.Outbound> | undefined;
        variants?: Array<Variants$.Outbound> | undefined;
        options?: Array<Options$.Outbound> | undefined;
        categories?: Array<string> | undefined;
        tags?: Array<string> | undefined;
        vendor?: string | undefined;
        inventoryQuantity?: number | undefined;
        inventoryLocation?: InventoryLocation$.Outbound | undefined;
        availableForSale?: boolean | undefined;
        dimensions?: PatchProductsIdDimensions$.Outbound | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        type?: string | undefined;
        metaTitle?: string | undefined;
        metaDescription?: string | undefined;
        seoKeywords?: Array<string> | undefined;
        slug?: string | undefined;
        customFields?: Array<PatchProductsIdProductsCustomFields$.Outbound> | undefined;
        isDownloadable?: boolean | undefined;
        downloadFiles?: Array<DownloadFiles$.Outbound> | undefined;
        relatedProducts?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        publishedAt?: number | undefined;
        status?: PatchProductsIdProductsStatus | undefined;
        tax?: Tax$.Outbound | undefined;
        localizations?: Array<Localizations$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchProductsIdRequestBody> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            prices: z.array(z.lazy(() => Prices$.outboundSchema)).optional(),
            sku: z.string().optional(),
            skuValidation: SkuValidation$.optional(),
            images: z.array(z.lazy(() => Images$.outboundSchema)).optional(),
            variants: z.array(z.lazy(() => Variants$.outboundSchema)).optional(),
            options: z.array(z.lazy(() => Options$.outboundSchema)).optional(),
            categories: z.array(z.string()).optional(),
            tags: z.array(z.string()).optional(),
            vendor: z.string().optional(),
            inventoryQuantity: z.number().optional(),
            inventoryLocation: z.lazy(() => InventoryLocation$.outboundSchema).optional(),
            availableForSale: z.boolean().optional(),
            dimensions: z.lazy(() => PatchProductsIdDimensions$.outboundSchema).optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            type: z.string().optional(),
            metaTitle: z.string().optional(),
            metaDescription: z.string().optional(),
            seoKeywords: z.array(z.string()).optional(),
            slug: z.string().optional(),
            customFields: z
                .array(z.lazy(() => PatchProductsIdProductsCustomFields$.outboundSchema))
                .optional(),
            isDownloadable: z.boolean().optional(),
            downloadFiles: z.array(z.lazy(() => DownloadFiles$.outboundSchema)).optional(),
            relatedProducts: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            publishedAt: z.number().optional(),
            status: PatchProductsIdProductsStatus$.optional(),
            tax: z.lazy(() => Tax$.outboundSchema).optional(),
            localizations: z.array(z.lazy(() => Localizations$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.prices === undefined ? null : { prices: v.prices }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.skuValidation === undefined ? null : { skuValidation: v.skuValidation }),
                ...(v.images === undefined ? null : { images: v.images }),
                ...(v.variants === undefined ? null : { variants: v.variants }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.categories === undefined ? null : { categories: v.categories }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.vendor === undefined ? null : { vendor: v.vendor }),
                ...(v.inventoryQuantity === undefined
                    ? null
                    : { inventoryQuantity: v.inventoryQuantity }),
                ...(v.inventoryLocation === undefined
                    ? null
                    : { inventoryLocation: v.inventoryLocation }),
                ...(v.availableForSale === undefined
                    ? null
                    : { availableForSale: v.availableForSale }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.metaTitle === undefined ? null : { metaTitle: v.metaTitle }),
                ...(v.metaDescription === undefined
                    ? null
                    : { metaDescription: v.metaDescription }),
                ...(v.seoKeywords === undefined ? null : { seoKeywords: v.seoKeywords }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.isDownloadable === undefined ? null : { isDownloadable: v.isDownloadable }),
                ...(v.downloadFiles === undefined ? null : { downloadFiles: v.downloadFiles }),
                ...(v.relatedProducts === undefined
                    ? null
                    : { relatedProducts: v.relatedProducts }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.publishedAt === undefined ? null : { publishedAt: v.publishedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.localizations === undefined ? null : { localizations: v.localizations }),
            };
        });
}

/** @internal */
export namespace PatchProductsIdRequest$ {
    export type Inbound = {
        id: string;
        "X-INTEGRATIONOS-SECRET": string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody?: PatchProductsIdRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchProductsIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            "X-INTEGRATIONOS-SECRET": z.string(),
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
            RequestBody: z.lazy(() => PatchProductsIdRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                xIntegrationosSecret: v["X-INTEGRATIONOS-SECRET"],
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        id: string;
        "X-INTEGRATIONOS-SECRET": string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody?: PatchProductsIdRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchProductsIdRequest> = z
        .object({
            id: z.string(),
            xIntegrationosSecret: z.string(),
            xIntegrationosConnectionKey: z.string(),
            requestBody: z.lazy(() => PatchProductsIdRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                "X-INTEGRATIONOS-SECRET": v.xIntegrationosSecret,
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export const PatchProductsIdStatusCode$ = z.nativeEnum(PatchProductsIdStatusCode);

/** @internal */
export namespace PatchProductsIdUnified$ {
    export type Inbound = {
        count?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchProductsIdUnified, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });

    export type Outbound = {
        count?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchProductsIdUnified> = z
        .object({
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });
}

/** @internal */
export namespace PatchProductsIdPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchProductsIdPassthrough, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchProductsIdPassthrough> =
        z.object({});
}

/** @internal */
export namespace PatchProductsIdCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchProductsIdCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchProductsIdCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace PatchProductsIdMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PatchProductsIdCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchProductsIdMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PatchProductsIdCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PatchProductsIdCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchProductsIdMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PatchProductsIdCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace PatchProductsIdResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: PatchProductsIdStatusCode | undefined;
        unified?: PatchProductsIdUnified$.Inbound | undefined;
        passthrough?: PatchProductsIdPassthrough$.Inbound | undefined;
        meta?: PatchProductsIdMeta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchProductsIdResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: PatchProductsIdStatusCode$.optional(),
            unified: z.lazy(() => PatchProductsIdUnified$.inboundSchema).optional(),
            passthrough: z.lazy(() => PatchProductsIdPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => PatchProductsIdMeta$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: PatchProductsIdStatusCode | undefined;
        unified?: PatchProductsIdUnified$.Outbound | undefined;
        passthrough?: PatchProductsIdPassthrough$.Outbound | undefined;
        meta?: PatchProductsIdMeta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchProductsIdResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: PatchProductsIdStatusCode$.optional(),
            unified: z.lazy(() => PatchProductsIdUnified$.outboundSchema).optional(),
            passthrough: z.lazy(() => PatchProductsIdPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => PatchProductsIdMeta$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });
}

/** @internal */
export namespace PatchProductsIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PatchProductsIdResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchProductsIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PatchProductsIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PatchProductsIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchProductsIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PatchProductsIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
