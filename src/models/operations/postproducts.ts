/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type PostProductsPrices = {
    amount?: number | undefined;
    currency?: string | undefined;
};

export enum PostProductsSkuValidation {
    GlobalUnique = "global_unique",
    LocalUnique = "local_unique",
    None = "none",
}

export enum PostProductsMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type PostProductsImages = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: PostProductsMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type PostProductsDimensions = {};

export enum PostProductsStatus {
    Active = "ACTIVE",
    Inactive = "INACTIVE",
    OutOfStock = "OUT_OF_STOCK",
    Discontinued = "DISCONTINUED",
}

export type PostProductsVariants = {
    id?: string | undefined;
    productId?: number | undefined;
    title?: string | undefined;
    sku?: string | undefined;
    price?: number | undefined;
    compareAtPrice?: number | undefined;
    inventoryQuantity?: number | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    requiresShipping?: boolean | undefined;
    taxable?: boolean | undefined;
    barcode?: string | undefined;
    imageId?: number | undefined;
    dimensions?: PostProductsDimensions | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    status?: PostProductsStatus | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type PostProductsOptions = {
    id?: string | undefined;
    productId?: number | undefined;
    name?: string | undefined;
    values?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
};

export enum PostProductsType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PostProductsGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PostProductsFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostProductsCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostProductsFieldType | undefined;
};

export type PostProductsAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PostProductsType | undefined;
    geoLocation?: PostProductsGeoLocation | undefined;
    customFields?: Array<PostProductsCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export type PostProductsContactInformation = {};

export enum PostProductsProductsType {
    Warehouse = "WAREHOUSE",
    RetailStore = "RETAIL_STORE",
    DistributionCenter = "DISTRIBUTION_CENTER",
    DropShipper = "DROP_SHIPPER",
    Other = "OTHER",
}

export type PostProductsInventoryLocation = {
    locationId?: string | undefined;
    name?: string | undefined;
    address?: PostProductsAddress | undefined;
    contactInformation?: Array<PostProductsContactInformation> | undefined;
    type?: PostProductsProductsType | undefined;
    quantity?: number | undefined;
    operationalHours?: string | undefined;
    isActive?: boolean | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    deleted?: boolean | undefined;
};

export type PostProductsProductsDimensions = {
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
};

export enum PostProductsProductsFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostProductsProductsCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostProductsProductsFieldType | undefined;
};

export type PostProductsMetadata = {};

export type PostProductsAssociatedWith = {};

export type PostProductsPermissions = {};

export type PostProductsDownloadFiles = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: PostProductsMetadata | undefined;
    associatedWith?: PostProductsAssociatedWith | undefined;
    permissions?: PostProductsPermissions | undefined;
};

export enum PostProductsProductsStatus {
    Active = "active",
    Archived = "archived",
    Draft = "draft",
    Deleted = "deleted",
}

export type PostProductsTaxDetails = {};

export enum PostProductsProductsRequestFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostProductsProductsRequestCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostProductsProductsRequestFieldType | undefined;
};

export type PostProductsTax = {
    taxCode?: string | undefined;
    taxable?: boolean | undefined;
    taxRate?: number | undefined;
    currency?: string | undefined;
    country?: string | undefined;
    region?: string | undefined;
    description?: string | undefined;
    taxAmount?: number | undefined;
    taxDetails?: PostProductsTaxDetails | undefined;
    customFields?: Array<PostProductsProductsRequestCustomFields> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type PostProductsLocalizations = {
    locale?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    metaTitle?: string | undefined;
    metaDescription?: string | undefined;
};

export type PostProductsRequestBody = {
    id: string;
    title: string;
    description: string;
    prices: Array<PostProductsPrices>;
    sku: string;
    skuValidation: PostProductsSkuValidation;
    images: Array<PostProductsImages>;
    variants: Array<PostProductsVariants>;
    options: Array<PostProductsOptions>;
    categories: Array<string>;
    tags: Array<string>;
    vendor: string;
    inventoryQuantity: number;
    inventoryLocation: PostProductsInventoryLocation;
    availableForSale: boolean;
    dimensions: PostProductsProductsDimensions;
    weight: number;
    weightUnit: string;
    type: string;
    metaTitle: string;
    metaDescription: string;
    seoKeywords: Array<string>;
    slug: string;
    customFields: Array<PostProductsProductsCustomFields>;
    isDownloadable: boolean;
    downloadFiles: Array<PostProductsDownloadFiles>;
    relatedProducts: Array<string>;
    createdAt: number;
    updatedAt: number;
    publishedAt: number;
    status: PostProductsProductsStatus;
    tax: PostProductsTax;
    localizations: Array<PostProductsLocalizations>;
};

export type PostProductsRequest = {
    /**
     * IntegrationOS API key
     */
    xIntegrationosSecret: string;
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
    requestBody: PostProductsRequestBody;
};

export enum PostProductsStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export type PostProductsProductsPrices = {
    amount?: number | undefined;
    currency?: string | undefined;
};

export enum PostProductsProductsSkuValidation {
    GlobalUnique = "global_unique",
    LocalUnique = "local_unique",
    None = "none",
}

export enum PostProductsProductsMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type PostProductsProductsImages = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: PostProductsProductsMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type PostProductsProductsResponse200Dimensions = {};

export enum PostProductsProductsResponse200Status {
    Active = "ACTIVE",
    Inactive = "INACTIVE",
    OutOfStock = "OUT_OF_STOCK",
    Discontinued = "DISCONTINUED",
}

export type PostProductsProductsVariants = {
    id?: string | undefined;
    productId?: number | undefined;
    title?: string | undefined;
    sku?: string | undefined;
    price?: number | undefined;
    compareAtPrice?: number | undefined;
    inventoryQuantity?: number | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    requiresShipping?: boolean | undefined;
    taxable?: boolean | undefined;
    barcode?: string | undefined;
    imageId?: number | undefined;
    dimensions?: PostProductsProductsResponse200Dimensions | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    status?: PostProductsProductsResponse200Status | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type PostProductsProductsOptions = {
    id?: string | undefined;
    productId?: number | undefined;
    name?: string | undefined;
    values?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
};

export enum PostProductsProductsResponse200Type {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PostProductsProductsGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PostProductsProductsResponse200ApplicationJSONFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostProductsProductsResponse200ApplicationJSONCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostProductsProductsResponse200ApplicationJSONFieldType | undefined;
};

export type PostProductsProductsAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PostProductsProductsResponse200Type | undefined;
    geoLocation?: PostProductsProductsGeoLocation | undefined;
    customFields?: Array<PostProductsProductsResponse200ApplicationJSONCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export type PostProductsProductsContactInformation = {};

export enum PostProductsProductsResponseType {
    Warehouse = "WAREHOUSE",
    RetailStore = "RETAIL_STORE",
    DistributionCenter = "DISTRIBUTION_CENTER",
    DropShipper = "DROP_SHIPPER",
    Other = "OTHER",
}

export type PostProductsProductsInventoryLocation = {
    locationId?: string | undefined;
    name?: string | undefined;
    address?: PostProductsProductsAddress | undefined;
    contactInformation?: Array<PostProductsProductsContactInformation> | undefined;
    type?: PostProductsProductsResponseType | undefined;
    quantity?: number | undefined;
    operationalHours?: string | undefined;
    isActive?: boolean | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    deleted?: boolean | undefined;
};

export type PostProductsProductsResponseDimensions = {
    height?: number | undefined;
    length?: number | undefined;
    width?: number | undefined;
};

export enum PostProductsProductsResponseFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostProductsProductsResponseCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostProductsProductsResponseFieldType | undefined;
};

export type PostProductsProductsMetadata = {};

export type PostProductsProductsAssociatedWith = {};

export type PostProductsProductsPermissions = {};

export type PostProductsProductsDownloadFiles = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: PostProductsProductsMetadata | undefined;
    associatedWith?: PostProductsProductsAssociatedWith | undefined;
    permissions?: PostProductsProductsPermissions | undefined;
};

export enum PostProductsProductsResponseStatus {
    Active = "active",
    Archived = "archived",
    Draft = "draft",
    Deleted = "deleted",
}

export type PostProductsProductsTaxDetails = {};

export enum PostProductsProductsResponse200FieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostProductsProductsResponse200CustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostProductsProductsResponse200FieldType | undefined;
};

export type PostProductsProductsTax = {
    taxCode?: string | undefined;
    taxable?: boolean | undefined;
    taxRate?: number | undefined;
    currency?: string | undefined;
    country?: string | undefined;
    region?: string | undefined;
    description?: string | undefined;
    taxAmount?: number | undefined;
    taxDetails?: PostProductsProductsTaxDetails | undefined;
    customFields?: Array<PostProductsProductsResponse200CustomFields> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type PostProductsProductsLocalizations = {
    locale?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    metaTitle?: string | undefined;
    metaDescription?: string | undefined;
};

export type PostProductsUnified = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    prices?: Array<PostProductsProductsPrices> | undefined;
    sku?: string | undefined;
    skuValidation?: PostProductsProductsSkuValidation | undefined;
    images?: Array<PostProductsProductsImages> | undefined;
    variants?: Array<PostProductsProductsVariants> | undefined;
    options?: Array<PostProductsProductsOptions> | undefined;
    categories?: Array<string> | undefined;
    tags?: Array<string> | undefined;
    vendor?: string | undefined;
    inventoryQuantity?: number | undefined;
    inventoryLocation?: PostProductsProductsInventoryLocation | undefined;
    availableForSale?: boolean | undefined;
    dimensions?: PostProductsProductsResponseDimensions | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    type?: string | undefined;
    metaTitle?: string | undefined;
    metaDescription?: string | undefined;
    seoKeywords?: Array<string> | undefined;
    slug?: string | undefined;
    customFields?: Array<PostProductsProductsResponseCustomFields> | undefined;
    isDownloadable?: boolean | undefined;
    downloadFiles?: Array<PostProductsProductsDownloadFiles> | undefined;
    relatedProducts?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    publishedAt?: number | undefined;
    status?: PostProductsProductsResponseStatus | undefined;
    tax?: PostProductsProductsTax | undefined;
    localizations?: Array<PostProductsProductsLocalizations> | undefined;
};

export type PostProductsPassthrough = {};

export type PostProductsCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type PostProductsMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: PostProductsCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

/**
 * Successful response
 */
export type PostProductsResponseBody = {
    status?: string | undefined;
    statusCode?: PostProductsStatusCode | undefined;
    unified?: PostProductsUnified | undefined;
    passthrough?: PostProductsPassthrough | undefined;
    meta?: PostProductsMeta | undefined;
};

export type PostProductsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: PostProductsResponseBody | undefined;
};

/** @internal */
export namespace PostProductsPrices$ {
    export type Inbound = {
        amount?: number | undefined;
        currency?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsPrices, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number().optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });

    export type Outbound = {
        amount?: number | undefined;
        currency?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsPrices> = z
        .object({
            amount: z.number().optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });
}

/** @internal */
export const PostProductsSkuValidation$ = z.nativeEnum(PostProductsSkuValidation);

/** @internal */
export const PostProductsMimeType$ = z.nativeEnum(PostProductsMimeType);

/** @internal */
export namespace PostProductsImages$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PostProductsMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsImages, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PostProductsMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PostProductsMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsImages> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PostProductsMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PostProductsDimensions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostProductsDimensions, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsDimensions> =
        z.object({});
}

/** @internal */
export const PostProductsStatus$ = z.nativeEnum(PostProductsStatus);

/** @internal */
export namespace PostProductsVariants$ {
    export type Inbound = {
        id?: string | undefined;
        productId?: number | undefined;
        title?: string | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        compareAtPrice?: number | undefined;
        inventoryQuantity?: number | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        barcode?: string | undefined;
        imageId?: number | undefined;
        dimensions?: PostProductsDimensions$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        status?: PostProductsStatus | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsVariants, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            productId: z.number().optional(),
            title: z.string().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            compareAtPrice: z.number().optional(),
            inventoryQuantity: z.number().optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            barcode: z.string().optional(),
            imageId: z.number().optional(),
            dimensions: z.lazy(() => PostProductsDimensions$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            status: PostProductsStatus$.optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.compareAtPrice === undefined ? null : { compareAtPrice: v.compareAtPrice }),
                ...(v.inventoryQuantity === undefined
                    ? null
                    : { inventoryQuantity: v.inventoryQuantity }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.barcode === undefined ? null : { barcode: v.barcode }),
                ...(v.imageId === undefined ? null : { imageId: v.imageId }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        productId?: number | undefined;
        title?: string | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        compareAtPrice?: number | undefined;
        inventoryQuantity?: number | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        barcode?: string | undefined;
        imageId?: number | undefined;
        dimensions?: PostProductsDimensions$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        status?: PostProductsStatus | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsVariants> = z
        .object({
            id: z.string().optional(),
            productId: z.number().optional(),
            title: z.string().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            compareAtPrice: z.number().optional(),
            inventoryQuantity: z.number().optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            barcode: z.string().optional(),
            imageId: z.number().optional(),
            dimensions: z.lazy(() => PostProductsDimensions$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            status: PostProductsStatus$.optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.compareAtPrice === undefined ? null : { compareAtPrice: v.compareAtPrice }),
                ...(v.inventoryQuantity === undefined
                    ? null
                    : { inventoryQuantity: v.inventoryQuantity }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.barcode === undefined ? null : { barcode: v.barcode }),
                ...(v.imageId === undefined ? null : { imageId: v.imageId }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PostProductsOptions$ {
    export type Inbound = {
        id?: string | undefined;
        productId?: number | undefined;
        name?: string | undefined;
        values?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsOptions, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            productId: z.number().optional(),
            name: z.string().optional(),
            values: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.values === undefined ? null : { values: v.values }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        productId?: number | undefined;
        name?: string | undefined;
        values?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsOptions> = z
        .object({
            id: z.string().optional(),
            productId: z.number().optional(),
            name: z.string().optional(),
            values: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.values === undefined ? null : { values: v.values }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

/** @internal */
export const PostProductsType$ = z.nativeEnum(PostProductsType);

/** @internal */
export namespace PostProductsGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsGeoLocation, z.ZodTypeDef, Inbound> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsGeoLocation> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PostProductsFieldType$ = z.nativeEnum(PostProductsFieldType);

/** @internal */
export namespace PostProductsCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostProductsFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostProductsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostProductsFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostProductsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PostProductsAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostProductsType | undefined;
        geoLocation?: PostProductsGeoLocation$.Inbound | undefined;
        customFields?: Array<PostProductsCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostProductsType$.optional(),
            geoLocation: z.lazy(() => PostProductsGeoLocation$.inboundSchema).optional(),
            customFields: z.array(z.lazy(() => PostProductsCustomFields$.inboundSchema)).optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostProductsType | undefined;
        geoLocation?: PostProductsGeoLocation$.Outbound | undefined;
        customFields?: Array<PostProductsCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsAddress> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostProductsType$.optional(),
            geoLocation: z.lazy(() => PostProductsGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PostProductsCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export namespace PostProductsContactInformation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostProductsContactInformation, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsContactInformation> =
        z.object({});
}

/** @internal */
export const PostProductsProductsType$ = z.nativeEnum(PostProductsProductsType);

/** @internal */
export namespace PostProductsInventoryLocation$ {
    export type Inbound = {
        locationId?: string | undefined;
        name?: string | undefined;
        address?: PostProductsAddress$.Inbound | undefined;
        contactInformation?: Array<PostProductsContactInformation$.Inbound> | undefined;
        type?: PostProductsProductsType | undefined;
        quantity?: number | undefined;
        operationalHours?: string | undefined;
        isActive?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsInventoryLocation, z.ZodTypeDef, Inbound> = z
        .object({
            locationId: z.string().optional(),
            name: z.string().optional(),
            address: z.lazy(() => PostProductsAddress$.inboundSchema).optional(),
            contactInformation: z
                .array(z.lazy(() => PostProductsContactInformation$.inboundSchema))
                .optional(),
            type: PostProductsProductsType$.optional(),
            quantity: z.number().optional(),
            operationalHours: z.string().optional(),
            isActive: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locationId === undefined ? null : { locationId: v.locationId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.contactInformation === undefined
                    ? null
                    : { contactInformation: v.contactInformation }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.operationalHours === undefined
                    ? null
                    : { operationalHours: v.operationalHours }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        locationId?: string | undefined;
        name?: string | undefined;
        address?: PostProductsAddress$.Outbound | undefined;
        contactInformation?: Array<PostProductsContactInformation$.Outbound> | undefined;
        type?: PostProductsProductsType | undefined;
        quantity?: number | undefined;
        operationalHours?: string | undefined;
        isActive?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsInventoryLocation> =
        z
            .object({
                locationId: z.string().optional(),
                name: z.string().optional(),
                address: z.lazy(() => PostProductsAddress$.outboundSchema).optional(),
                contactInformation: z
                    .array(z.lazy(() => PostProductsContactInformation$.outboundSchema))
                    .optional(),
                type: PostProductsProductsType$.optional(),
                quantity: z.number().optional(),
                operationalHours: z.string().optional(),
                isActive: z.boolean().optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                deleted: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.locationId === undefined ? null : { locationId: v.locationId }),
                    ...(v.name === undefined ? null : { name: v.name }),
                    ...(v.address === undefined ? null : { address: v.address }),
                    ...(v.contactInformation === undefined
                        ? null
                        : { contactInformation: v.contactInformation }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                    ...(v.operationalHours === undefined
                        ? null
                        : { operationalHours: v.operationalHours }),
                    ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                };
            });
}

/** @internal */
export namespace PostProductsProductsDimensions$ {
    export type Inbound = {
        height?: number | undefined;
        length?: number | undefined;
        width?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsProductsDimensions, z.ZodTypeDef, Inbound> = z
        .object({
            height: z.number().optional(),
            length: z.number().optional(),
            width: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.length === undefined ? null : { length: v.length }),
                ...(v.width === undefined ? null : { width: v.width }),
            };
        });

    export type Outbound = {
        height?: number | undefined;
        length?: number | undefined;
        width?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsProductsDimensions> =
        z
            .object({
                height: z.number().optional(),
                length: z.number().optional(),
                width: z.number().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.height === undefined ? null : { height: v.height }),
                    ...(v.length === undefined ? null : { length: v.length }),
                    ...(v.width === undefined ? null : { width: v.width }),
                };
            });
}

/** @internal */
export const PostProductsProductsFieldType$ = z.nativeEnum(PostProductsProductsFieldType);

/** @internal */
export namespace PostProductsProductsCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostProductsProductsFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsProductsCustomFields, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                fieldName: z.string().optional(),
                fieldValue: z.string().optional(),
                fieldType: PostProductsProductsFieldType$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                    ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                    ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostProductsProductsFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostProductsProductsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PostProductsMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostProductsMetadata, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsMetadata> = z.object(
        {}
    );
}

/** @internal */
export namespace PostProductsAssociatedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostProductsAssociatedWith, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsAssociatedWith> =
        z.object({});
}

/** @internal */
export namespace PostProductsPermissions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostProductsPermissions, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsPermissions> =
        z.object({});
}

/** @internal */
export namespace PostProductsDownloadFiles$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PostProductsMetadata$.Inbound | undefined;
        associatedWith?: PostProductsAssociatedWith$.Inbound | undefined;
        permissions?: PostProductsPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsDownloadFiles, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PostProductsMetadata$.inboundSchema).optional(),
            associatedWith: z.lazy(() => PostProductsAssociatedWith$.inboundSchema).optional(),
            permissions: z.lazy(() => PostProductsPermissions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PostProductsMetadata$.Outbound | undefined;
        associatedWith?: PostProductsAssociatedWith$.Outbound | undefined;
        permissions?: PostProductsPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsDownloadFiles> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PostProductsMetadata$.outboundSchema).optional(),
            associatedWith: z.lazy(() => PostProductsAssociatedWith$.outboundSchema).optional(),
            permissions: z.lazy(() => PostProductsPermissions$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export const PostProductsProductsStatus$ = z.nativeEnum(PostProductsProductsStatus);

/** @internal */
export namespace PostProductsTaxDetails$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostProductsTaxDetails, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsTaxDetails> =
        z.object({});
}

/** @internal */
export const PostProductsProductsRequestFieldType$ = z.nativeEnum(
    PostProductsProductsRequestFieldType
);

/** @internal */
export namespace PostProductsProductsRequestCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostProductsProductsRequestFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostProductsProductsRequestCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostProductsProductsRequestFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostProductsProductsRequestFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsRequestCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostProductsProductsRequestFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PostProductsTax$ {
    export type Inbound = {
        taxCode?: string | undefined;
        taxable?: boolean | undefined;
        taxRate?: number | undefined;
        currency?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        description?: string | undefined;
        taxAmount?: number | undefined;
        taxDetails?: PostProductsTaxDetails$.Inbound | undefined;
        customFields?: Array<PostProductsProductsRequestCustomFields$.Inbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsTax, z.ZodTypeDef, Inbound> = z
        .object({
            taxCode: z.string().optional(),
            taxable: z.boolean().optional(),
            taxRate: z.number().optional(),
            currency: z.string().optional(),
            country: z.string().optional(),
            region: z.string().optional(),
            description: z.string().optional(),
            taxAmount: z.number().optional(),
            taxDetails: z.lazy(() => PostProductsTaxDetails$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PostProductsProductsRequestCustomFields$.inboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.taxCode === undefined ? null : { taxCode: v.taxCode }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.taxRate === undefined ? null : { taxRate: v.taxRate }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.taxAmount === undefined ? null : { taxAmount: v.taxAmount }),
                ...(v.taxDetails === undefined ? null : { taxDetails: v.taxDetails }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        taxCode?: string | undefined;
        taxable?: boolean | undefined;
        taxRate?: number | undefined;
        currency?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        description?: string | undefined;
        taxAmount?: number | undefined;
        taxDetails?: PostProductsTaxDetails$.Outbound | undefined;
        customFields?: Array<PostProductsProductsRequestCustomFields$.Outbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsTax> = z
        .object({
            taxCode: z.string().optional(),
            taxable: z.boolean().optional(),
            taxRate: z.number().optional(),
            currency: z.string().optional(),
            country: z.string().optional(),
            region: z.string().optional(),
            description: z.string().optional(),
            taxAmount: z.number().optional(),
            taxDetails: z.lazy(() => PostProductsTaxDetails$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PostProductsProductsRequestCustomFields$.outboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.taxCode === undefined ? null : { taxCode: v.taxCode }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.taxRate === undefined ? null : { taxRate: v.taxRate }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.taxAmount === undefined ? null : { taxAmount: v.taxAmount }),
                ...(v.taxDetails === undefined ? null : { taxDetails: v.taxDetails }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PostProductsLocalizations$ {
    export type Inbound = {
        locale?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        metaTitle?: string | undefined;
        metaDescription?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsLocalizations, z.ZodTypeDef, Inbound> = z
        .object({
            locale: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            metaTitle: z.string().optional(),
            metaDescription: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locale === undefined ? null : { locale: v.locale }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.metaTitle === undefined ? null : { metaTitle: v.metaTitle }),
                ...(v.metaDescription === undefined
                    ? null
                    : { metaDescription: v.metaDescription }),
            };
        });

    export type Outbound = {
        locale?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        metaTitle?: string | undefined;
        metaDescription?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsLocalizations> = z
        .object({
            locale: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            metaTitle: z.string().optional(),
            metaDescription: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locale === undefined ? null : { locale: v.locale }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.metaTitle === undefined ? null : { metaTitle: v.metaTitle }),
                ...(v.metaDescription === undefined
                    ? null
                    : { metaDescription: v.metaDescription }),
            };
        });
}

/** @internal */
export namespace PostProductsRequestBody$ {
    export type Inbound = {
        id: string;
        title: string;
        description: string;
        prices: Array<PostProductsPrices$.Inbound>;
        sku: string;
        skuValidation: PostProductsSkuValidation;
        images: Array<PostProductsImages$.Inbound>;
        variants: Array<PostProductsVariants$.Inbound>;
        options: Array<PostProductsOptions$.Inbound>;
        categories: Array<string>;
        tags: Array<string>;
        vendor: string;
        inventoryQuantity: number;
        inventoryLocation: PostProductsInventoryLocation$.Inbound;
        availableForSale: boolean;
        dimensions: PostProductsProductsDimensions$.Inbound;
        weight: number;
        weightUnit: string;
        type: string;
        metaTitle: string;
        metaDescription: string;
        seoKeywords: Array<string>;
        slug: string;
        customFields: Array<PostProductsProductsCustomFields$.Inbound>;
        isDownloadable: boolean;
        downloadFiles: Array<PostProductsDownloadFiles$.Inbound>;
        relatedProducts: Array<string>;
        createdAt: number;
        updatedAt: number;
        publishedAt: number;
        status: PostProductsProductsStatus;
        tax: PostProductsTax$.Inbound;
        localizations: Array<PostProductsLocalizations$.Inbound>;
    };

    export const inboundSchema: z.ZodType<PostProductsRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            title: z.string(),
            description: z.string(),
            prices: z.array(z.lazy(() => PostProductsPrices$.inboundSchema)),
            sku: z.string(),
            skuValidation: PostProductsSkuValidation$,
            images: z.array(z.lazy(() => PostProductsImages$.inboundSchema)),
            variants: z.array(z.lazy(() => PostProductsVariants$.inboundSchema)),
            options: z.array(z.lazy(() => PostProductsOptions$.inboundSchema)),
            categories: z.array(z.string()),
            tags: z.array(z.string()),
            vendor: z.string(),
            inventoryQuantity: z.number(),
            inventoryLocation: z.lazy(() => PostProductsInventoryLocation$.inboundSchema),
            availableForSale: z.boolean(),
            dimensions: z.lazy(() => PostProductsProductsDimensions$.inboundSchema),
            weight: z.number(),
            weightUnit: z.string(),
            type: z.string(),
            metaTitle: z.string(),
            metaDescription: z.string(),
            seoKeywords: z.array(z.string()),
            slug: z.string(),
            customFields: z.array(z.lazy(() => PostProductsProductsCustomFields$.inboundSchema)),
            isDownloadable: z.boolean(),
            downloadFiles: z.array(z.lazy(() => PostProductsDownloadFiles$.inboundSchema)),
            relatedProducts: z.array(z.string()),
            createdAt: z.number(),
            updatedAt: z.number(),
            publishedAt: z.number(),
            status: PostProductsProductsStatus$,
            tax: z.lazy(() => PostProductsTax$.inboundSchema),
            localizations: z.array(z.lazy(() => PostProductsLocalizations$.inboundSchema)),
        })
        .transform((v) => {
            return {
                id: v.id,
                title: v.title,
                description: v.description,
                prices: v.prices,
                sku: v.sku,
                skuValidation: v.skuValidation,
                images: v.images,
                variants: v.variants,
                options: v.options,
                categories: v.categories,
                tags: v.tags,
                vendor: v.vendor,
                inventoryQuantity: v.inventoryQuantity,
                inventoryLocation: v.inventoryLocation,
                availableForSale: v.availableForSale,
                dimensions: v.dimensions,
                weight: v.weight,
                weightUnit: v.weightUnit,
                type: v.type,
                metaTitle: v.metaTitle,
                metaDescription: v.metaDescription,
                seoKeywords: v.seoKeywords,
                slug: v.slug,
                customFields: v.customFields,
                isDownloadable: v.isDownloadable,
                downloadFiles: v.downloadFiles,
                relatedProducts: v.relatedProducts,
                createdAt: v.createdAt,
                updatedAt: v.updatedAt,
                publishedAt: v.publishedAt,
                status: v.status,
                tax: v.tax,
                localizations: v.localizations,
            };
        });

    export type Outbound = {
        id: string;
        title: string;
        description: string;
        prices: Array<PostProductsPrices$.Outbound>;
        sku: string;
        skuValidation: PostProductsSkuValidation;
        images: Array<PostProductsImages$.Outbound>;
        variants: Array<PostProductsVariants$.Outbound>;
        options: Array<PostProductsOptions$.Outbound>;
        categories: Array<string>;
        tags: Array<string>;
        vendor: string;
        inventoryQuantity: number;
        inventoryLocation: PostProductsInventoryLocation$.Outbound;
        availableForSale: boolean;
        dimensions: PostProductsProductsDimensions$.Outbound;
        weight: number;
        weightUnit: string;
        type: string;
        metaTitle: string;
        metaDescription: string;
        seoKeywords: Array<string>;
        slug: string;
        customFields: Array<PostProductsProductsCustomFields$.Outbound>;
        isDownloadable: boolean;
        downloadFiles: Array<PostProductsDownloadFiles$.Outbound>;
        relatedProducts: Array<string>;
        createdAt: number;
        updatedAt: number;
        publishedAt: number;
        status: PostProductsProductsStatus;
        tax: PostProductsTax$.Outbound;
        localizations: Array<PostProductsLocalizations$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsRequestBody> = z
        .object({
            id: z.string(),
            title: z.string(),
            description: z.string(),
            prices: z.array(z.lazy(() => PostProductsPrices$.outboundSchema)),
            sku: z.string(),
            skuValidation: PostProductsSkuValidation$,
            images: z.array(z.lazy(() => PostProductsImages$.outboundSchema)),
            variants: z.array(z.lazy(() => PostProductsVariants$.outboundSchema)),
            options: z.array(z.lazy(() => PostProductsOptions$.outboundSchema)),
            categories: z.array(z.string()),
            tags: z.array(z.string()),
            vendor: z.string(),
            inventoryQuantity: z.number(),
            inventoryLocation: z.lazy(() => PostProductsInventoryLocation$.outboundSchema),
            availableForSale: z.boolean(),
            dimensions: z.lazy(() => PostProductsProductsDimensions$.outboundSchema),
            weight: z.number(),
            weightUnit: z.string(),
            type: z.string(),
            metaTitle: z.string(),
            metaDescription: z.string(),
            seoKeywords: z.array(z.string()),
            slug: z.string(),
            customFields: z.array(z.lazy(() => PostProductsProductsCustomFields$.outboundSchema)),
            isDownloadable: z.boolean(),
            downloadFiles: z.array(z.lazy(() => PostProductsDownloadFiles$.outboundSchema)),
            relatedProducts: z.array(z.string()),
            createdAt: z.number(),
            updatedAt: z.number(),
            publishedAt: z.number(),
            status: PostProductsProductsStatus$,
            tax: z.lazy(() => PostProductsTax$.outboundSchema),
            localizations: z.array(z.lazy(() => PostProductsLocalizations$.outboundSchema)),
        })
        .transform((v) => {
            return {
                id: v.id,
                title: v.title,
                description: v.description,
                prices: v.prices,
                sku: v.sku,
                skuValidation: v.skuValidation,
                images: v.images,
                variants: v.variants,
                options: v.options,
                categories: v.categories,
                tags: v.tags,
                vendor: v.vendor,
                inventoryQuantity: v.inventoryQuantity,
                inventoryLocation: v.inventoryLocation,
                availableForSale: v.availableForSale,
                dimensions: v.dimensions,
                weight: v.weight,
                weightUnit: v.weightUnit,
                type: v.type,
                metaTitle: v.metaTitle,
                metaDescription: v.metaDescription,
                seoKeywords: v.seoKeywords,
                slug: v.slug,
                customFields: v.customFields,
                isDownloadable: v.isDownloadable,
                downloadFiles: v.downloadFiles,
                relatedProducts: v.relatedProducts,
                createdAt: v.createdAt,
                updatedAt: v.updatedAt,
                publishedAt: v.publishedAt,
                status: v.status,
                tax: v.tax,
                localizations: v.localizations,
            };
        });
}

/** @internal */
export namespace PostProductsRequest$ {
    export type Inbound = {
        "X-INTEGRATIONOS-SECRET": string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody: PostProductsRequestBody$.Inbound;
    };

    export const inboundSchema: z.ZodType<PostProductsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "X-INTEGRATIONOS-SECRET": z.string(),
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
            RequestBody: z.lazy(() => PostProductsRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return {
                xIntegrationosSecret: v["X-INTEGRATIONOS-SECRET"],
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
                requestBody: v.RequestBody,
            };
        });

    export type Outbound = {
        "X-INTEGRATIONOS-SECRET": string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody: PostProductsRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsRequest> = z
        .object({
            xIntegrationosSecret: z.string(),
            xIntegrationosConnectionKey: z.string(),
            requestBody: z.lazy(() => PostProductsRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return {
                "X-INTEGRATIONOS-SECRET": v.xIntegrationosSecret,
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
                RequestBody: v.requestBody,
            };
        });
}

/** @internal */
export const PostProductsStatusCode$ = z.nativeEnum(PostProductsStatusCode);

/** @internal */
export namespace PostProductsProductsPrices$ {
    export type Inbound = {
        amount?: number | undefined;
        currency?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsProductsPrices, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number().optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });

    export type Outbound = {
        amount?: number | undefined;
        currency?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsProductsPrices> = z
        .object({
            amount: z.number().optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });
}

/** @internal */
export const PostProductsProductsSkuValidation$ = z.nativeEnum(PostProductsProductsSkuValidation);

/** @internal */
export const PostProductsProductsMimeType$ = z.nativeEnum(PostProductsProductsMimeType);

/** @internal */
export namespace PostProductsProductsImages$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PostProductsProductsMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsProductsImages, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PostProductsProductsMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PostProductsProductsMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsProductsImages> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PostProductsProductsMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PostProductsProductsResponse200Dimensions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PostProductsProductsResponse200Dimensions,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsResponse200Dimensions
    > = z.object({});
}

/** @internal */
export const PostProductsProductsResponse200Status$ = z.nativeEnum(
    PostProductsProductsResponse200Status
);

/** @internal */
export namespace PostProductsProductsVariants$ {
    export type Inbound = {
        id?: string | undefined;
        productId?: number | undefined;
        title?: string | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        compareAtPrice?: number | undefined;
        inventoryQuantity?: number | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        barcode?: string | undefined;
        imageId?: number | undefined;
        dimensions?: PostProductsProductsResponse200Dimensions$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        status?: PostProductsProductsResponse200Status | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsProductsVariants, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            productId: z.number().optional(),
            title: z.string().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            compareAtPrice: z.number().optional(),
            inventoryQuantity: z.number().optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            barcode: z.string().optional(),
            imageId: z.number().optional(),
            dimensions: z
                .lazy(() => PostProductsProductsResponse200Dimensions$.inboundSchema)
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            status: PostProductsProductsResponse200Status$.optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.compareAtPrice === undefined ? null : { compareAtPrice: v.compareAtPrice }),
                ...(v.inventoryQuantity === undefined
                    ? null
                    : { inventoryQuantity: v.inventoryQuantity }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.barcode === undefined ? null : { barcode: v.barcode }),
                ...(v.imageId === undefined ? null : { imageId: v.imageId }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        productId?: number | undefined;
        title?: string | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        compareAtPrice?: number | undefined;
        inventoryQuantity?: number | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        barcode?: string | undefined;
        imageId?: number | undefined;
        dimensions?: PostProductsProductsResponse200Dimensions$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        status?: PostProductsProductsResponse200Status | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsProductsVariants> = z
        .object({
            id: z.string().optional(),
            productId: z.number().optional(),
            title: z.string().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            compareAtPrice: z.number().optional(),
            inventoryQuantity: z.number().optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            barcode: z.string().optional(),
            imageId: z.number().optional(),
            dimensions: z
                .lazy(() => PostProductsProductsResponse200Dimensions$.outboundSchema)
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            status: PostProductsProductsResponse200Status$.optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.compareAtPrice === undefined ? null : { compareAtPrice: v.compareAtPrice }),
                ...(v.inventoryQuantity === undefined
                    ? null
                    : { inventoryQuantity: v.inventoryQuantity }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.barcode === undefined ? null : { barcode: v.barcode }),
                ...(v.imageId === undefined ? null : { imageId: v.imageId }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PostProductsProductsOptions$ {
    export type Inbound = {
        id?: string | undefined;
        productId?: number | undefined;
        name?: string | undefined;
        values?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsProductsOptions, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            productId: z.number().optional(),
            name: z.string().optional(),
            values: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.values === undefined ? null : { values: v.values }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        productId?: number | undefined;
        name?: string | undefined;
        values?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsProductsOptions> = z
        .object({
            id: z.string().optional(),
            productId: z.number().optional(),
            name: z.string().optional(),
            values: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.values === undefined ? null : { values: v.values }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

/** @internal */
export const PostProductsProductsResponse200Type$ = z.nativeEnum(
    PostProductsProductsResponse200Type
);

/** @internal */
export namespace PostProductsProductsGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsProductsGeoLocation, z.ZodTypeDef, Inbound> =
        z
            .object({
                latitude: z.number().optional(),
                longitude: z.number().optional(),
                altitude: z.number().optional(),
                accuracy: z.number().optional(),
                altitudeAccuracy: z.number().optional(),
                heading: z.number().optional(),
                speed: z.number().optional(),
                timestamp: z.number().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                    ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                    ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                    ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                    ...(v.altitudeAccuracy === undefined
                        ? null
                        : { altitudeAccuracy: v.altitudeAccuracy }),
                    ...(v.heading === undefined ? null : { heading: v.heading }),
                    ...(v.speed === undefined ? null : { speed: v.speed }),
                    ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                };
            });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsGeoLocation
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PostProductsProductsResponse200ApplicationJSONFieldType$ = z.nativeEnum(
    PostProductsProductsResponse200ApplicationJSONFieldType
);

/** @internal */
export namespace PostProductsProductsResponse200ApplicationJSONCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostProductsProductsResponse200ApplicationJSONFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostProductsProductsResponse200ApplicationJSONCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostProductsProductsResponse200ApplicationJSONFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostProductsProductsResponse200ApplicationJSONFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsResponse200ApplicationJSONCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostProductsProductsResponse200ApplicationJSONFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PostProductsProductsAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostProductsProductsResponse200Type | undefined;
        geoLocation?: PostProductsProductsGeoLocation$.Inbound | undefined;
        customFields?:
            | Array<PostProductsProductsResponse200ApplicationJSONCustomFields$.Inbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsProductsAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostProductsProductsResponse200Type$.optional(),
            geoLocation: z.lazy(() => PostProductsProductsGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            PostProductsProductsResponse200ApplicationJSONCustomFields$.inboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostProductsProductsResponse200Type | undefined;
        geoLocation?: PostProductsProductsGeoLocation$.Outbound | undefined;
        customFields?:
            | Array<PostProductsProductsResponse200ApplicationJSONCustomFields$.Outbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsProductsAddress> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostProductsProductsResponse200Type$.optional(),
            geoLocation: z.lazy(() => PostProductsProductsGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            PostProductsProductsResponse200ApplicationJSONCustomFields$.outboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export namespace PostProductsProductsContactInformation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PostProductsProductsContactInformation,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsContactInformation
    > = z.object({});
}

/** @internal */
export const PostProductsProductsResponseType$ = z.nativeEnum(PostProductsProductsResponseType);

/** @internal */
export namespace PostProductsProductsInventoryLocation$ {
    export type Inbound = {
        locationId?: string | undefined;
        name?: string | undefined;
        address?: PostProductsProductsAddress$.Inbound | undefined;
        contactInformation?: Array<PostProductsProductsContactInformation$.Inbound> | undefined;
        type?: PostProductsProductsResponseType | undefined;
        quantity?: number | undefined;
        operationalHours?: string | undefined;
        isActive?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostProductsProductsInventoryLocation,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            locationId: z.string().optional(),
            name: z.string().optional(),
            address: z.lazy(() => PostProductsProductsAddress$.inboundSchema).optional(),
            contactInformation: z
                .array(z.lazy(() => PostProductsProductsContactInformation$.inboundSchema))
                .optional(),
            type: PostProductsProductsResponseType$.optional(),
            quantity: z.number().optional(),
            operationalHours: z.string().optional(),
            isActive: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locationId === undefined ? null : { locationId: v.locationId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.contactInformation === undefined
                    ? null
                    : { contactInformation: v.contactInformation }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.operationalHours === undefined
                    ? null
                    : { operationalHours: v.operationalHours }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        locationId?: string | undefined;
        name?: string | undefined;
        address?: PostProductsProductsAddress$.Outbound | undefined;
        contactInformation?: Array<PostProductsProductsContactInformation$.Outbound> | undefined;
        type?: PostProductsProductsResponseType | undefined;
        quantity?: number | undefined;
        operationalHours?: string | undefined;
        isActive?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsInventoryLocation
    > = z
        .object({
            locationId: z.string().optional(),
            name: z.string().optional(),
            address: z.lazy(() => PostProductsProductsAddress$.outboundSchema).optional(),
            contactInformation: z
                .array(z.lazy(() => PostProductsProductsContactInformation$.outboundSchema))
                .optional(),
            type: PostProductsProductsResponseType$.optional(),
            quantity: z.number().optional(),
            operationalHours: z.string().optional(),
            isActive: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locationId === undefined ? null : { locationId: v.locationId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.contactInformation === undefined
                    ? null
                    : { contactInformation: v.contactInformation }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.operationalHours === undefined
                    ? null
                    : { operationalHours: v.operationalHours }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PostProductsProductsResponseDimensions$ {
    export type Inbound = {
        height?: number | undefined;
        length?: number | undefined;
        width?: number | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostProductsProductsResponseDimensions,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            height: z.number().optional(),
            length: z.number().optional(),
            width: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.length === undefined ? null : { length: v.length }),
                ...(v.width === undefined ? null : { width: v.width }),
            };
        });

    export type Outbound = {
        height?: number | undefined;
        length?: number | undefined;
        width?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsResponseDimensions
    > = z
        .object({
            height: z.number().optional(),
            length: z.number().optional(),
            width: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.length === undefined ? null : { length: v.length }),
                ...(v.width === undefined ? null : { width: v.width }),
            };
        });
}

/** @internal */
export const PostProductsProductsResponseFieldType$ = z.nativeEnum(
    PostProductsProductsResponseFieldType
);

/** @internal */
export namespace PostProductsProductsResponseCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostProductsProductsResponseFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostProductsProductsResponseCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostProductsProductsResponseFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostProductsProductsResponseFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsResponseCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostProductsProductsResponseFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PostProductsProductsMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostProductsProductsMetadata, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsProductsMetadata> =
        z.object({});
}

/** @internal */
export namespace PostProductsProductsAssociatedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PostProductsProductsAssociatedWith,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsAssociatedWith
    > = z.object({});
}

/** @internal */
export namespace PostProductsProductsPermissions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostProductsProductsPermissions, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsPermissions
    > = z.object({});
}

/** @internal */
export namespace PostProductsProductsDownloadFiles$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PostProductsProductsMetadata$.Inbound | undefined;
        associatedWith?: PostProductsProductsAssociatedWith$.Inbound | undefined;
        permissions?: PostProductsProductsPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostProductsProductsDownloadFiles,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PostProductsProductsMetadata$.inboundSchema).optional(),
            associatedWith: z
                .lazy(() => PostProductsProductsAssociatedWith$.inboundSchema)
                .optional(),
            permissions: z.lazy(() => PostProductsProductsPermissions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PostProductsProductsMetadata$.Outbound | undefined;
        associatedWith?: PostProductsProductsAssociatedWith$.Outbound | undefined;
        permissions?: PostProductsProductsPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsDownloadFiles
    > = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PostProductsProductsMetadata$.outboundSchema).optional(),
            associatedWith: z
                .lazy(() => PostProductsProductsAssociatedWith$.outboundSchema)
                .optional(),
            permissions: z.lazy(() => PostProductsProductsPermissions$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export const PostProductsProductsResponseStatus$ = z.nativeEnum(PostProductsProductsResponseStatus);

/** @internal */
export namespace PostProductsProductsTaxDetails$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostProductsProductsTaxDetails, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsProductsTaxDetails> =
        z.object({});
}

/** @internal */
export const PostProductsProductsResponse200FieldType$ = z.nativeEnum(
    PostProductsProductsResponse200FieldType
);

/** @internal */
export namespace PostProductsProductsResponse200CustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostProductsProductsResponse200FieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostProductsProductsResponse200CustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostProductsProductsResponse200FieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostProductsProductsResponse200FieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsResponse200CustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostProductsProductsResponse200FieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PostProductsProductsTax$ {
    export type Inbound = {
        taxCode?: string | undefined;
        taxable?: boolean | undefined;
        taxRate?: number | undefined;
        currency?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        description?: string | undefined;
        taxAmount?: number | undefined;
        taxDetails?: PostProductsProductsTaxDetails$.Inbound | undefined;
        customFields?: Array<PostProductsProductsResponse200CustomFields$.Inbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsProductsTax, z.ZodTypeDef, Inbound> = z
        .object({
            taxCode: z.string().optional(),
            taxable: z.boolean().optional(),
            taxRate: z.number().optional(),
            currency: z.string().optional(),
            country: z.string().optional(),
            region: z.string().optional(),
            description: z.string().optional(),
            taxAmount: z.number().optional(),
            taxDetails: z.lazy(() => PostProductsProductsTaxDetails$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PostProductsProductsResponse200CustomFields$.inboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.taxCode === undefined ? null : { taxCode: v.taxCode }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.taxRate === undefined ? null : { taxRate: v.taxRate }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.taxAmount === undefined ? null : { taxAmount: v.taxAmount }),
                ...(v.taxDetails === undefined ? null : { taxDetails: v.taxDetails }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        taxCode?: string | undefined;
        taxable?: boolean | undefined;
        taxRate?: number | undefined;
        currency?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        description?: string | undefined;
        taxAmount?: number | undefined;
        taxDetails?: PostProductsProductsTaxDetails$.Outbound | undefined;
        customFields?: Array<PostProductsProductsResponse200CustomFields$.Outbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsProductsTax> = z
        .object({
            taxCode: z.string().optional(),
            taxable: z.boolean().optional(),
            taxRate: z.number().optional(),
            currency: z.string().optional(),
            country: z.string().optional(),
            region: z.string().optional(),
            description: z.string().optional(),
            taxAmount: z.number().optional(),
            taxDetails: z.lazy(() => PostProductsProductsTaxDetails$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PostProductsProductsResponse200CustomFields$.outboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.taxCode === undefined ? null : { taxCode: v.taxCode }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.taxRate === undefined ? null : { taxRate: v.taxRate }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.taxAmount === undefined ? null : { taxAmount: v.taxAmount }),
                ...(v.taxDetails === undefined ? null : { taxDetails: v.taxDetails }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PostProductsProductsLocalizations$ {
    export type Inbound = {
        locale?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        metaTitle?: string | undefined;
        metaDescription?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostProductsProductsLocalizations,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            locale: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            metaTitle: z.string().optional(),
            metaDescription: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locale === undefined ? null : { locale: v.locale }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.metaTitle === undefined ? null : { metaTitle: v.metaTitle }),
                ...(v.metaDescription === undefined
                    ? null
                    : { metaDescription: v.metaDescription }),
            };
        });

    export type Outbound = {
        locale?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        metaTitle?: string | undefined;
        metaDescription?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostProductsProductsLocalizations
    > = z
        .object({
            locale: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            metaTitle: z.string().optional(),
            metaDescription: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locale === undefined ? null : { locale: v.locale }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.metaTitle === undefined ? null : { metaTitle: v.metaTitle }),
                ...(v.metaDescription === undefined
                    ? null
                    : { metaDescription: v.metaDescription }),
            };
        });
}

/** @internal */
export namespace PostProductsUnified$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        prices?: Array<PostProductsProductsPrices$.Inbound> | undefined;
        sku?: string | undefined;
        skuValidation?: PostProductsProductsSkuValidation | undefined;
        images?: Array<PostProductsProductsImages$.Inbound> | undefined;
        variants?: Array<PostProductsProductsVariants$.Inbound> | undefined;
        options?: Array<PostProductsProductsOptions$.Inbound> | undefined;
        categories?: Array<string> | undefined;
        tags?: Array<string> | undefined;
        vendor?: string | undefined;
        inventoryQuantity?: number | undefined;
        inventoryLocation?: PostProductsProductsInventoryLocation$.Inbound | undefined;
        availableForSale?: boolean | undefined;
        dimensions?: PostProductsProductsResponseDimensions$.Inbound | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        type?: string | undefined;
        metaTitle?: string | undefined;
        metaDescription?: string | undefined;
        seoKeywords?: Array<string> | undefined;
        slug?: string | undefined;
        customFields?: Array<PostProductsProductsResponseCustomFields$.Inbound> | undefined;
        isDownloadable?: boolean | undefined;
        downloadFiles?: Array<PostProductsProductsDownloadFiles$.Inbound> | undefined;
        relatedProducts?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        publishedAt?: number | undefined;
        status?: PostProductsProductsResponseStatus | undefined;
        tax?: PostProductsProductsTax$.Inbound | undefined;
        localizations?: Array<PostProductsProductsLocalizations$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsUnified, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            prices: z.array(z.lazy(() => PostProductsProductsPrices$.inboundSchema)).optional(),
            sku: z.string().optional(),
            skuValidation: PostProductsProductsSkuValidation$.optional(),
            images: z.array(z.lazy(() => PostProductsProductsImages$.inboundSchema)).optional(),
            variants: z.array(z.lazy(() => PostProductsProductsVariants$.inboundSchema)).optional(),
            options: z.array(z.lazy(() => PostProductsProductsOptions$.inboundSchema)).optional(),
            categories: z.array(z.string()).optional(),
            tags: z.array(z.string()).optional(),
            vendor: z.string().optional(),
            inventoryQuantity: z.number().optional(),
            inventoryLocation: z
                .lazy(() => PostProductsProductsInventoryLocation$.inboundSchema)
                .optional(),
            availableForSale: z.boolean().optional(),
            dimensions: z
                .lazy(() => PostProductsProductsResponseDimensions$.inboundSchema)
                .optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            type: z.string().optional(),
            metaTitle: z.string().optional(),
            metaDescription: z.string().optional(),
            seoKeywords: z.array(z.string()).optional(),
            slug: z.string().optional(),
            customFields: z
                .array(z.lazy(() => PostProductsProductsResponseCustomFields$.inboundSchema))
                .optional(),
            isDownloadable: z.boolean().optional(),
            downloadFiles: z
                .array(z.lazy(() => PostProductsProductsDownloadFiles$.inboundSchema))
                .optional(),
            relatedProducts: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            publishedAt: z.number().optional(),
            status: PostProductsProductsResponseStatus$.optional(),
            tax: z.lazy(() => PostProductsProductsTax$.inboundSchema).optional(),
            localizations: z
                .array(z.lazy(() => PostProductsProductsLocalizations$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.prices === undefined ? null : { prices: v.prices }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.skuValidation === undefined ? null : { skuValidation: v.skuValidation }),
                ...(v.images === undefined ? null : { images: v.images }),
                ...(v.variants === undefined ? null : { variants: v.variants }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.categories === undefined ? null : { categories: v.categories }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.vendor === undefined ? null : { vendor: v.vendor }),
                ...(v.inventoryQuantity === undefined
                    ? null
                    : { inventoryQuantity: v.inventoryQuantity }),
                ...(v.inventoryLocation === undefined
                    ? null
                    : { inventoryLocation: v.inventoryLocation }),
                ...(v.availableForSale === undefined
                    ? null
                    : { availableForSale: v.availableForSale }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.metaTitle === undefined ? null : { metaTitle: v.metaTitle }),
                ...(v.metaDescription === undefined
                    ? null
                    : { metaDescription: v.metaDescription }),
                ...(v.seoKeywords === undefined ? null : { seoKeywords: v.seoKeywords }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.isDownloadable === undefined ? null : { isDownloadable: v.isDownloadable }),
                ...(v.downloadFiles === undefined ? null : { downloadFiles: v.downloadFiles }),
                ...(v.relatedProducts === undefined
                    ? null
                    : { relatedProducts: v.relatedProducts }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.publishedAt === undefined ? null : { publishedAt: v.publishedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.localizations === undefined ? null : { localizations: v.localizations }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        prices?: Array<PostProductsProductsPrices$.Outbound> | undefined;
        sku?: string | undefined;
        skuValidation?: PostProductsProductsSkuValidation | undefined;
        images?: Array<PostProductsProductsImages$.Outbound> | undefined;
        variants?: Array<PostProductsProductsVariants$.Outbound> | undefined;
        options?: Array<PostProductsProductsOptions$.Outbound> | undefined;
        categories?: Array<string> | undefined;
        tags?: Array<string> | undefined;
        vendor?: string | undefined;
        inventoryQuantity?: number | undefined;
        inventoryLocation?: PostProductsProductsInventoryLocation$.Outbound | undefined;
        availableForSale?: boolean | undefined;
        dimensions?: PostProductsProductsResponseDimensions$.Outbound | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        type?: string | undefined;
        metaTitle?: string | undefined;
        metaDescription?: string | undefined;
        seoKeywords?: Array<string> | undefined;
        slug?: string | undefined;
        customFields?: Array<PostProductsProductsResponseCustomFields$.Outbound> | undefined;
        isDownloadable?: boolean | undefined;
        downloadFiles?: Array<PostProductsProductsDownloadFiles$.Outbound> | undefined;
        relatedProducts?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        publishedAt?: number | undefined;
        status?: PostProductsProductsResponseStatus | undefined;
        tax?: PostProductsProductsTax$.Outbound | undefined;
        localizations?: Array<PostProductsProductsLocalizations$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsUnified> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            prices: z.array(z.lazy(() => PostProductsProductsPrices$.outboundSchema)).optional(),
            sku: z.string().optional(),
            skuValidation: PostProductsProductsSkuValidation$.optional(),
            images: z.array(z.lazy(() => PostProductsProductsImages$.outboundSchema)).optional(),
            variants: z
                .array(z.lazy(() => PostProductsProductsVariants$.outboundSchema))
                .optional(),
            options: z.array(z.lazy(() => PostProductsProductsOptions$.outboundSchema)).optional(),
            categories: z.array(z.string()).optional(),
            tags: z.array(z.string()).optional(),
            vendor: z.string().optional(),
            inventoryQuantity: z.number().optional(),
            inventoryLocation: z
                .lazy(() => PostProductsProductsInventoryLocation$.outboundSchema)
                .optional(),
            availableForSale: z.boolean().optional(),
            dimensions: z
                .lazy(() => PostProductsProductsResponseDimensions$.outboundSchema)
                .optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            type: z.string().optional(),
            metaTitle: z.string().optional(),
            metaDescription: z.string().optional(),
            seoKeywords: z.array(z.string()).optional(),
            slug: z.string().optional(),
            customFields: z
                .array(z.lazy(() => PostProductsProductsResponseCustomFields$.outboundSchema))
                .optional(),
            isDownloadable: z.boolean().optional(),
            downloadFiles: z
                .array(z.lazy(() => PostProductsProductsDownloadFiles$.outboundSchema))
                .optional(),
            relatedProducts: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            publishedAt: z.number().optional(),
            status: PostProductsProductsResponseStatus$.optional(),
            tax: z.lazy(() => PostProductsProductsTax$.outboundSchema).optional(),
            localizations: z
                .array(z.lazy(() => PostProductsProductsLocalizations$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.prices === undefined ? null : { prices: v.prices }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.skuValidation === undefined ? null : { skuValidation: v.skuValidation }),
                ...(v.images === undefined ? null : { images: v.images }),
                ...(v.variants === undefined ? null : { variants: v.variants }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.categories === undefined ? null : { categories: v.categories }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.vendor === undefined ? null : { vendor: v.vendor }),
                ...(v.inventoryQuantity === undefined
                    ? null
                    : { inventoryQuantity: v.inventoryQuantity }),
                ...(v.inventoryLocation === undefined
                    ? null
                    : { inventoryLocation: v.inventoryLocation }),
                ...(v.availableForSale === undefined
                    ? null
                    : { availableForSale: v.availableForSale }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.metaTitle === undefined ? null : { metaTitle: v.metaTitle }),
                ...(v.metaDescription === undefined
                    ? null
                    : { metaDescription: v.metaDescription }),
                ...(v.seoKeywords === undefined ? null : { seoKeywords: v.seoKeywords }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.isDownloadable === undefined ? null : { isDownloadable: v.isDownloadable }),
                ...(v.downloadFiles === undefined ? null : { downloadFiles: v.downloadFiles }),
                ...(v.relatedProducts === undefined
                    ? null
                    : { relatedProducts: v.relatedProducts }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.publishedAt === undefined ? null : { publishedAt: v.publishedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.localizations === undefined ? null : { localizations: v.localizations }),
            };
        });
}

/** @internal */
export namespace PostProductsPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostProductsPassthrough, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsPassthrough> =
        z.object({});
}

/** @internal */
export namespace PostProductsCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace PostProductsMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PostProductsCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PostProductsCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PostProductsCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PostProductsCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace PostProductsResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: PostProductsStatusCode | undefined;
        unified?: PostProductsUnified$.Inbound | undefined;
        passthrough?: PostProductsPassthrough$.Inbound | undefined;
        meta?: PostProductsMeta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: PostProductsStatusCode$.optional(),
            unified: z.lazy(() => PostProductsUnified$.inboundSchema).optional(),
            passthrough: z.lazy(() => PostProductsPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => PostProductsMeta$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: PostProductsStatusCode | undefined;
        unified?: PostProductsUnified$.Outbound | undefined;
        passthrough?: PostProductsPassthrough$.Outbound | undefined;
        meta?: PostProductsMeta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: PostProductsStatusCode$.optional(),
            unified: z.lazy(() => PostProductsUnified$.outboundSchema).optional(),
            passthrough: z.lazy(() => PostProductsPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => PostProductsMeta$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });
}

/** @internal */
export namespace PostProductsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PostProductsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostProductsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PostProductsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PostProductsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostProductsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PostProductsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
